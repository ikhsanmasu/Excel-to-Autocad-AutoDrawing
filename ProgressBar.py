# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ProgressBar.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from pyautocad import Autocad, APoint
import openpyxl
import array as ar
from ctypes import *
from comtypes import automation
from configparser import ConfigParser
import time
import math

from PyQt5 import QtCore, QtGui, QtWidgets

class Ui_progresWIndow(QtWidgets.QDialog):
    def __init__(self, path):
        super().__init__()
        self.path = path
        self.setWindowIcon(QtGui.QIcon('main icon.png'))
        self.setObjectName("progresWIndow")
        self.resize(453, 158)
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.label = QtWidgets.QLabel(self)
        self.label.setStyleSheet("background-color: rgb(221, 221, 221);")
        self.label.setText("")
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.verticalLayout_2.addWidget(self.label)
        self.progressBar = QtWidgets.QProgressBar(self)
        self.progressBar.setProperty("value", 0)
        self.progressBar.setObjectName("progressBar")
        self.verticalLayout_2.addWidget(self.progressBar)
        self.buttonBox = QtWidgets.QDialogButtonBox(self)
        self.buttonBox.setOrientation(QtCore.Qt.Horizontal)
        self.buttonBox.setStandardButtons(QtWidgets.QDialogButtonBox.Ok|QtWidgets.QDialogButtonBox.Abort)
        self.buttonBox.setObjectName("buttonBox")
        self.verticalLayout_2.addWidget(self.buttonBox)

        self.retranslateUi(self)
        self.buttonBox.accepted.connect(self.accept)
        self.buttonBox.rejected.connect(self.reject)
        self.buttonBox.button(QtWidgets.QDialogButtonBox.Ok).setDisabled(True)

        self.thread = pyautocadThread(self.path)
        self.thread.change_value.connect(self.setProgressVal)
        self.thread.start()

        QtCore.QMetaObject.connectSlotsByName(self)

    def retranslateUi(self, progresWIndow):
        _translate = QtCore.QCoreApplication.translate
        progresWIndow.setWindowTitle(_translate("progresWindow", "Proses Dimulai - Jangan Ganggu Autocad!!"))
        self.label.setText("Persiapan...")

    def setProgressVal(self, val):
        self.progressBar.setValue(val[0])
        self.label.setText(val[1])
        if val[0] == 100:
            self.buttonBox.button(QtWidgets.QDialogButtonBox.Ok).setEnabled(True)
            self.buttonBox.button(QtWidgets.QDialogButtonBox.Abort).setDisabled(True)

class pyautocadThread(QtCore.QThread):
    change_value = QtCore.pyqtSignal(list)
    def __init__(self, path):
        super(pyautocadThread, self).__init__()
        self.path = path

    def messageBox(self, text, textLong):
        msg = QtWidgets.QMessageBox()
        msg.setIcon(QtWidgets.QMessageBox.Information)
        msg.setText(text)
        msg.setInformativeText(textLong)
        msg.setWindowTitle("Information")
        msg.exec_()

    def run(self):
            try:
                manualBool = lambda x: 1 if x == "True" else 0
                parser = ConfigParser()
                parser.read("./configuration/default/lastConfig.ini")
                # UMUM
                tCHeader = float(parser.get('UMUM', 'tinggi_cell_header'))
                tCIsi = float(parser.get('UMUM', 'tinggi_cell_isi'))
                jBaris = int(parser.get('UMUM', 'jumlah_baris'))
                uTHeader = float(parser.get('UMUM', 'ukuran_text_header'))
                uTNotes = float(parser.get('UMUM', 'ukuran_text_notes'))
                uSimbol = float(parser.get('UMUM', 'ukuran_simbol'))
                mCKiri = float(parser.get('UMUM', 'margin_cell_kiri'))
                mCKanan = float(parser.get('UMUM', 'margin_cell_kanan'))
                mCAtas = float(parser.get('UMUM', 'margin_cell_atas'))
                mCBawah = float(parser.get('UMUM', 'margin_cell_bawah'))
                cUText = manualBool(parser.get('UMUM', 'cek_ukuran_text'))
                headerNotes = manualBool(parser.get('UMUM', 'buat_header_dan_notes'))
                frame = manualBool(parser.get('UMUM', 'buat_frame'))
                tnStasiun = str(parser.get('UMUM', 'nama_stasiun'))
                tnoGambar = str(parser.get('UMUM', 'nomor_gambar'))
                tdesigner = str(parser.get('UMUM', 'designer'))
                tAssDesigner = str(parser.get('UMUM', 'ass_designer'))
                tChecker = str(parser.get('UMUM', 'checker'))
                tA = str(parser.get('UMUM', 'approved'))


                # IT1
                # lc = lebar cell, ta = text alignment, ca = cell alignment
                it1lc = []
                it1ts = []
                it1ta = []
                it1ca = []
                it1X = [0]
                for i in range(26):
                    it1lc.append(float(parser.get('IT1', "lc%s" % (i + 1))))
                    it1X.append(sum(it1lc))
                for i in range(26):
                    it1ts.append(float(parser.get('IT1', "ts%s" % (i + 1))))
                for i in range(26):
                    it1ta.append(str(parser.get('IT1', "ta%s" % (i + 1))))
                for i in range(26):
                    it1ca.append(str(parser.get('IT1', "ca%s" % (i + 1))))

                # IT2
                it2lc = []
                it2ts = []
                it2ta = []
                it2ca = []
                it2X = [0]
                for i in range(15):
                    it2lc.append(float(parser.get('IT2', "lc%s" % (i + 1))))
                    it2X.append(sum(it2lc))
                for i in range(15):
                    it2ts.append(float(parser.get('IT2', "ts%s" % (i + 1))))
                for i in range(15):
                    it2ta.append(str(parser.get('IT2', "ta%s" % (i + 1))))
                for i in range(15):
                    it2ca.append(str(parser.get('IT2', "ca%s" % (i + 1))))

            except Exception as e:
                self.messageBox("Gagal Buka File Config", str(e) + "\n\nPeriksa Ulang lastConfig.ini")

            acad = Autocad()

            def convert2list(IT, startRow, jumlahRow):
                max = 0
                for i in range(1000):
                    if IT.cell(row=i + startRow, column=1).value != None:
                        max = i + 1
                convert = lambda x: '' if x == None else x
                return [[convert(IT.cell(row=baris + startRow, column=kolom + 1).value) for kolom in range(jumlahRow)] for baris in
                        range(max)]

            try:
                IT = openpyxl.load_workbook(self.path)
                IT1 = convert2list(IT["IT 1"], 4, 26)
                IT2 = convert2list(IT["IT 2"], 3, 15)
            except Exception as e:
                self.messageBox(str(e), "Periksa File Excel")


            def getBoundingBox(entity):
                # mendapatkan tinggi bounding box text
                # Create 3-d 'Variant' array of 'd'-ouble
                A = automation.VARIANT(ar.array('d', [0, 0, 0]))
                B = automation.VARIANT(ar.array('d', [0, 0, 0]))
                # Get the reference / address
                vA = byref(A)
                vB = byref(B)
                # Call the method from COM object
                entity.GetBoundingBox(vA, vB)
                # Return two points as 3-d
                return A.value, B.value

            bobotSetting = int(cUText) * 10
            totalProsesCuText = len(IT1) + len(IT2)
            totalTabelIT1 = math.ceil(len(IT1) / jBaris)
            totalTabelIT2 = math.ceil(len(IT2) / jBaris)
            totalBobot = bobotSetting + totalTabelIT1 + totalTabelIT2
            pengaliProsess = 100 / totalBobot

            if cUText:
                point = APoint(0, 0)
                for indexBaris, baris in enumerate(IT1):
                    self.change_value.emit([indexBaris / totalProsesCuText * bobotSetting * pengaliProsess, "Menyesuaikan Ukuran Text..."])
                    for indexKolom, txt in enumerate(baris):
                        cek = True
                        while cek:
                            cekText = acad.model.AddMText(point, it1lc[indexKolom], txt)
                            cekText.height = str(it1ts[indexKolom])
                            awal, akhir = getBoundingBox(cekText)
                            tinggi = akhir[1] - awal[1]
                            cekText.delete()
                            if tinggi <= tCIsi - mCAtas - mCBawah:
                                it1ts[indexKolom] += 0.1
                                cek = False
                            it1ts[indexKolom] -= 0.1

                for indexBaris, baris in enumerate(IT2):
                    self.change_value.emit([(len(IT1) + indexBaris) / totalProsesCuText * bobotSetting * pengaliProsess, "Menyesuaikan Ukuran Text..."])
                    for indexKolom, txt in enumerate(baris):
                        cek = True
                        while cek:
                            cekText = acad.model.AddMText(point, it2lc[indexKolom], txt)
                            cekText.height = str(it2ts[indexKolom])
                            awal, akhir = getBoundingBox(cekText)
                            tinggi = akhir[1] - awal[1]
                            cekText.delete()
                            if tinggi <= tCIsi - mCAtas - mCBawah:
                                it2ts[indexKolom] += 0.1
                                cek = False
                            it2ts[indexKolom] -= 0.1

            # membuat IT1
            startX = 0
            startY = 200

            def tambahBaris(x, y, panjang):
                p1 = APoint(startX + x, startY - y)
                p2 = APoint(startX + x + panjang, startY - y)
                acad.model.AddLine(p1, p2)

            def tambahKolom(x, y, panjang):
                p1 = APoint(startX + x, startY - y)
                p2 = APoint(startX + x, startY - y - panjang)
                acad.model.AddLine(p1, p2)

            # x, y = point pojok kiri atas pada kotak cell
            # lebarCell => lebar bounding box text akan menyesuaikan lebar cell
            def tambahText(x, y, text, besarText, lebarCell, tinggiCell, alignmentCell="CENTER", alignmentText="CENTER"):
                lebarCell = lebarCell - mCKiri - mCKanan
                tinggiCell = tinggiCell - mCAtas - mCBawah
                x = x + mCKiri
                y = y - mCAtas
                pCell = APoint(startX + x, startY - y)
                textAcad = acad.model.AddMtext(pCell, lebarCell, text)


                start, end = getBoundingBox(textAcad)
                tinggiText = end[1] - start[1]

                # jika tidak middle dan bottom aligment cell adalah TOP
                if alignmentCell == "CENTER":
                    pTengah = APoint(startX + x, startY - y - tinggiCell / 2 + tinggiText / 2)
                    textAcad.move(pCell, pTengah)
                elif alignmentCell == "BOTTOM":
                    pTengah = APoint(startX + x, startY - y - tinggiCell + tinggiText)
                    textAcad.move(pCell, pTengah)

                if alignmentText == "LEFT":
                    textAcad.AttachmentPoint = "1"  # aktualnya TOP LEFT
                elif alignmentText == "CENTER":
                    textAcad.AttachmentPoint = "2"  # aktualnya TOP CENTER

                awal, _ = getBoundingBox(textAcad)

                textAcad.height = str(besarText)
                return startY - y - awal[1]

            def tambahTextNotes(x, y, text, besarText, lebarCell):
                pCell = APoint(startX + x, startY - y)
                textAcad = acad.model.AddMtext(pCell, lebarCell, text)
                textAcad.height = str(besarText)

            def addSimbolSNotes(x, y, besarText):
                x = startX + x
                y = startY - y
                p1 = APoint(x, y + besarText)
                p2 = APoint(x + besarText, y)
                acad.model.AddLine(p1, p2)
                p1 = APoint(x + besarText, y)
                p2 = APoint(x, y - besarText)
                acad.model.AddLine(p1, p2)
                p1 = APoint(x, y - besarText)
                p2 = APoint(x - besarText, y)
                acad.model.AddLine(p1, p2)
                p1 = APoint(x - besarText, y)
                p2 = APoint(x, y + besarText)
                acad.model.AddLine(p1, p2)

            def addSimbolR(x, y, lebarCell, tinggiCell, r):
                x = startX + x + lebarCell / 2
                y = startY - y - tinggiCell / 2
                p1 = APoint(x, y)
                p2 = APoint(x - r, y)
                p3 = APoint(x + r, y)
                acad.model.AddCircle(p1, r)
                acad.model.AddLine(p2, p3)

            def addSimbolY(x, y, lebarCell, tinggiCell, r):
                x = startX + x + lebarCell / 2
                y = startY - y - tinggiCell / 2
                p1 = APoint(x, y)
                p2 = APoint(x - r * 0.7071, y - r * 0.7071)
                p3 = APoint(x + r * 0.7071, y + r * 0.7071)
                acad.model.AddCircle(p1, r)
                acad.model.AddLine(p2, p3)

            def addSimbolG(x, y, lebarCell, tinggiCell, r, special=0):
                x = startX + x + lebarCell / 2
                y = startY - y - tinggiCell / 2
                p1 = APoint(x, y)
                p2 = APoint(x, y + r)
                p3 = APoint(x, y - r)
                acad.model.AddCircle(p1, r)
                acad.model.AddLine(p2, p3)

                if special:
                    p1 = APoint(x + r + 0.1, y - r + uTNotes)
                    textAcad = acad.model.AddMtext(p1, lebarCell, "*2")
                    textAcad.height = str(uTNotes)

            def addSimbolE(x, y, lebarCell, tinggiCell, r):
                x = startX + x + lebarCell / 2
                y = startY - y - tinggiCell / 2
                p1 = APoint(x, y + r)
                p2 = APoint(x + r, y - r)
                acad.model.AddLine(p1, p2)
                p1 = APoint(x + r, y - r)
                p2 = APoint(x - r, y - r)
                acad.model.AddLine(p1, p2)
                p1 = APoint(x - r, y - r)
                p2 = APoint(x, y + r)
                acad.model.AddLine(p1, p2)

                p1 = APoint(x + r + 0.1, y - r + uTNotes)
                textAcad = acad.model.AddMtext(p1, lebarCell, "*3")
                textAcad.height = str(uTNotes)

            def addSimbolL(x, y, lebarCell, tinggiCell, r):
                x = startX + x + lebarCell / 2
                y = startY - y - tinggiCell / 2
                p1 = APoint(x - r, y + r)
                p2 = APoint(x + r, y + r)
                acad.model.AddLine(p1, p2)
                p1 = APoint(x + r, y + r)
                p2 = APoint(x + r, y - r)
                acad.model.AddLine(p1, p2)
                p1 = APoint(x + r, y - r)
                p2 = APoint(x - r, y - r)
                acad.model.AddLine(p1, p2)
                p1 = APoint(x - r, y - r)
                p2 = APoint(x - r, y + r)
                acad.model.AddLine(p1, p2)

                p1 = APoint(x - 0.6 * r, y - 0.6 * r)
                acad.model.AddCircle(p1, r / 5)
                p1 = APoint(x + 0.6 * r, y + 0.6 * r)
                acad.model.AddCircle(p1, r / 5)

            def addSimbolS(x, y, lebarCell, tinggiCell, kecepatan, r, alignmentCell="CENTER", alignmentText="CENTER"):
                if alignmentText == "CENTER":
                    x = startX + x + lebarCell / 2
                elif alignmentText == "LEFT":
                    x = startX + x + r + mCKiri
                else:
                    x = startX + x + lebarCell - r - mCKanan

                if alignmentCell == "CENTER":
                    y = startY - y - tinggiCell / 2
                elif alignmentCell == "TOP":
                    y = startY - y - r - mCAtas
                else:
                    y = startY - y - tinggiCell + r + mCAtas

                p1 = APoint(x, y + r)
                p2 = APoint(x + r, y)
                acad.model.AddLine(p1, p2)
                p1 = APoint(x + r, y)
                p2 = APoint(x, y - r)
                acad.model.AddLine(p1, p2)
                p1 = APoint(x, y - r)
                p2 = APoint(x - r, y)
                acad.model.AddLine(p1, p2)
                p1 = APoint(x - r, y)
                p2 = APoint(x, y + r)
                acad.model.AddLine(p1, p2)
                p1 = APoint(x - r / 2, y + r / 2)
                text = acad.model.AddMText(p1, r, kecepatan)
                text.AttachmentPoint = "2"  # Top Left
                text.height = str(r)  # text height

        #setting undung progressBar



        # try:
            for indexTabel in range(totalTabelIT1):
                self.change_value.emit([int((bobotSetting + indexTabel) * pengaliProsess), "Drafting Interlocking Tabel (%s) ..." % (indexTabel + 1)])
                if headerNotes:
                    tambahText(it1X[26] * 0.5 - 50, -15, "INTERLOCKING TABLE (%s)" % (indexTabel + 1), 3, 100, 2)
                    t1 = "{\\fArial|b1|i0|c0|p34;\LNOTES}\n\n(T) = TRAIN ROUTE\n(E) = EMERGENCY ROUTE\n(S) = SHUNT ROUTE\n(CF) = CONTRA FLOW ROUTE"
                    t2 = "\n\nHOME SIGNAL IS CLEARED TO\nGREEN WHEN THE STARTER\nSIGNAL IS GREEN"
                    t3 = "\n\nEMERGENCY SIGNAL ASPECT IS\nCANCELLED AUTOMATICALLY AFTER\n90 SECOND"
                    t4 = "\n\n\nSPEED INDICATOR TO BE LAMP PROVED WITH YELLOW\nAND GREEN SIGNAL"
                    t4x = "\n\n\n\n\n\n\n\n\n3  =  VARIABLE SPEED INDICATOR\n3  =  FIX SPEED INDICATOR"
                    t5 = "\n\nSIGNAL NUMBER MARKED WITH 'X',\nSHOW OPPOSING SIGNAL WHERE NO\nDESTINATION SIGNAL IS AVAILABLE"
                    t6 = "\n\n\nFIX MARKER"
                    t7 = "\n\nRX-N = \"KEY LOCK\" AT UP POSITION AND\nLOCKED\nDX-N = \"DERAILER\" AT UP POSITION AND\nLOCKED"
                    t8 = "\n\n{\LUNDERLINE} = TRACK CIRCUIT WITH\nUNDERLINE IS OPPOSITE SIGNAL TRACK"

                    tambahTextNotes(0, tCHeader + jBaris * tCIsi + 5, "\n\n*1\n\n\n\n\n*2", 1, 25)
                    tambahTextNotes(4, tCHeader + jBaris * tCIsi + 5, t1 + t2, 1, 25)

                    tambahTextNotes(30, tCHeader + jBaris * tCIsi + 5, "\n\n*3\n\n\n\n\n*4", 1, 50)
                    tambahTextNotes(34, tCHeader + jBaris * tCIsi + 5, t3 + t4, 1, 40)
                    tambahTextNotes(39, tCHeader + jBaris * tCIsi + 5, t4x, 1, 40)
                    addSimbolSNotes(39.35, tCHeader + jBaris * tCIsi + 5 + 17.25, 1)

                    tambahTextNotes(80, tCHeader + jBaris * tCIsi + 5, "\n\n*5\n\n\n\n\n*6", 1, 25)
                    tambahTextNotes(84, tCHeader + jBaris * tCIsi + 5, t5 + t6, 1, 40)

                    tambahTextNotes(120, tCHeader + jBaris * tCIsi + 5, "\n\n*7\n\n\n\n\n*8", 1, 50)
                    tambahTextNotes(124, tCHeader + jBaris * tCIsi + 5, t7 + t8, 1, 40)

                # membuat tabel
                tambahBaris(0, 0, it1X[26])
                tambahBaris(it1X[2], tCHeader * 0.5, sum(it1lc[2:25]))
                tambahBaris(it1X[3], tCHeader * 0.75, sum(it1lc[3:8]))
                tambahBaris(it1X[10], tCHeader * 0.75, sum(it1lc[10:12]))
                tambahBaris(it1X[13], tCHeader * 0.75, sum(it1lc[13:15]))

                for index in range(jBaris + 1):
                    tambahBaris(0, tCHeader + index * tCIsi, it1X[26])
                for start in [it1X[0], it1X[1], it1X[2], it1X[12], it1X[15],
                              it1X[18], it1X[25], it1X[26]]:
                    tambahKolom(start, 0, tCHeader + jBaris * tCIsi)
                for start in [it1X[3], it1X[8], it1X[9], it1X[10], it1X[13],
                              it1X[16], it1X[17], it1X[19], it1X[20], it1X[21],
                              it1X[22], it1X[23], it1X[24]]:
                    tambahKolom(start, tCHeader * 0.5, tCHeader + jBaris * tCIsi - tCHeader * 0.5)
                for start in [it1X[4], it1X[5], it1X[6], it1X[7], it1X[8], it1X[11], it1X[14]]:
                    tambahKolom(start, tCHeader * 0.75, tCHeader + jBaris * tCIsi - tCHeader * 0.75)

                # mengisi Text
                tambahText(0, 0, "ROUTE NO.", uTHeader, it1lc[0], tCHeader)
                bawahRouteName = tambahText(it1X[1], 0, "ROUTE NAME", uTHeader, it1lc[1], tCHeader)
                tambahText(it1X[1], bawahRouteName + 1, "*1", uTNotes, it1lc[1], tCHeader, alignmentCell="TOP")
                tambahText(it1X[25], 0, "REMARK", uTHeader, it1lc[25], tCHeader)

                tambahText(it1X[2], 0, "SIGNAL AT START OF ROUTE", uTHeader, sum(it1lc[2:12]), tCHeader * 0.5)
                tambahText(it1X[12], 0, "DISTANT SIGNAL", uTHeader, sum(it1lc[12:15]), tCHeader * 0.5)
                tambahText(it1X[15], 0, "DESTINATION OF ROUTE", uTHeader, sum(it1lc[15:18]), tCHeader * 0.5)
                tambahText(it1X[18], 0, "ROUTE CONTROL", uTHeader, sum(it1lc[18:25]), tCHeader * 0.5)

                tambahText(it1X[2], tCHeader * 0.5, "NO.", uTHeader, sum(it1lc[2:3]), tCHeader * 0.5)

                bawahSPIND = tambahText(it1X[8], tCHeader * 0.5, "SP. IND.", uTHeader, sum(it1lc[8:9]), tCHeader * 0.5)
                tambahText(it1X[8], tCHeader * 0.5 + bawahSPIND + 0.5, "*4", uTNotes, sum(it1lc[8:9]), tCHeader * 0.5,
                           alignmentCell="TOP")

                tambahText(it1X[9], tCHeader * 0.5, "CF. IND.", uTHeader, sum(it1lc[9:10]), tCHeader * 0.5)
                tambahText(it1X[12], tCHeader * 0.5, "NO.", uTHeader, sum(it1lc[12:13]), tCHeader * 0.5)
                bawahNo = tambahText(it1X[15], tCHeader * 0.5, "NO.", uTHeader, sum(it1lc[15:16]), tCHeader * 0.5)
                tambahText(it1X[15], tCHeader * 0.5 + bawahNo + 1, "*5", uTNotes, sum(it1lc[15:16]), tCHeader * 0.5,
                           alignmentCell="TOP")
                tambahText(it1X[16], tCHeader * 0.5, "STATION NAME", uTHeader, sum(it1lc[16:17]), tCHeader * 0.5)
                tambahText(it1X[17], tCHeader * 0.5, "ASP. PROV.", uTHeader, sum(it1lc[17:18]), tCHeader * 0.5)
                tambahText(it1X[18], tCHeader * 0.5, "POINT LOCKED", uTHeader, sum(it1lc[18:19]),
                           tCHeader * 0.5)
                bawahKeyDetect = tambahText(it1X[19], tCHeader * 0.5, "KEY DETECT", uTHeader, sum(it1lc[19:20]),
                                            tCHeader * 0.5)
                tambahText(it1X[19], tCHeader * 0.5 + bawahKeyDetect + 0.5, "*7", uTNotes, sum(it1lc[19:20]),
                           tCHeader * 0.5, alignmentCell="TOP")
                bawahTextCC = tambahText(it1X[20], tCHeader * 0.5, "TRACK CIRCUIT CLEAR", uTHeader, sum(it1lc[20:21]),
                                         tCHeader * 0.5)
                tambahText(it1X[20], tCHeader * 0.5 + bawahTextCC + 0.5, "*8", uTNotes, sum(it1lc[20:21]),
                           tCHeader * 0.5, alignmentCell="TOP")
                tambahText(it1X[21], tCHeader * 0.5, "SHUNT SIG. CLEAR", uTHeader, sum(it1lc[21:22]), tCHeader * 0.5)
                tambahText(it1X[22], tCHeader * 0.5, "OPPOSING SIG. LOCKED", uTHeader, sum(it1lc[22:23]),
                           tCHeader * 0.5)
                tambahText(it1X[23], tCHeader * 0.5, "APPROACH TRACK", uTHeader, sum(it1lc[23:24]), tCHeader * 0.5)
                tambahText(it1X[24], tCHeader * 0.5, "REQ. APPROACH TRACK OCCUPIED", uTHeader, sum(it1lc[24:25]),
                           tCHeader * 0.5)
                tambahText(it1X[3], tCHeader * 0.5, "ASPECT", uTHeader, sum(it1lc[3:8]), tCHeader * 0.25)
                tambahText(it1X[10], tCHeader * 0.5, "DIRECTION IND", uTHeader, sum(it1lc[10:12]), tCHeader * 0.25)
                tambahText(it1X[13], tCHeader * 0.5, "ASPECT", uTHeader, sum(it1lc[13:15]), tCHeader * 0.25)

                tambahText(it1X[10], tCHeader * 0.75, "LEFT", uTHeader, sum(it1lc[10:11]), tCHeader * 0.25)
                tambahText(it1X[11], tCHeader * 0.75, "RIGHT", uTHeader, sum(it1lc[11:12]), tCHeader * 0.25)

                addSimbolR(it1X[3], tCHeader * 0.75, it1lc[3], tCHeader * 0.25, uSimbol)
                addSimbolY(it1X[4], tCHeader * 0.75, it1lc[4], tCHeader * 0.25, uSimbol)
                addSimbolG(it1X[5], tCHeader * 0.75, it1lc[5], tCHeader * 0.25, uSimbol, 1)
                addSimbolE(it1X[6], tCHeader * 0.75, it1lc[6], tCHeader * 0.25, uSimbol)
                addSimbolL(it1X[7], tCHeader * 0.75, it1lc[7], tCHeader * 0.25, uSimbol)
                addSimbolY(it1X[13], tCHeader * 0.75, it1lc[13], tCHeader * 0.25, uSimbol)
                addSimbolG(it1X[14], tCHeader * 0.75, it1lc[14], tCHeader * 0.25, uSimbol)

                for indexIsi in range(jBaris):
                    if indexIsi + indexTabel * jBaris < len(IT1):
                        for indexKolom in range(26):
                            if indexKolom == 20:
                                text = IT1[indexIsi + indexTabel * jBaris][indexKolom]
                                if str(text).count("T") <= 1:
                                    isiKolom = "{\L%s}" % str(text)
                                else:
                                    isiKolom = "{\L%s}" % str(text)[0:str(text).find(" ")] + str(text)[
                                                                                           str(text).find(" ")::]
                            elif indexKolom == 8 and len(str(IT1[indexIsi + indexTabel * jBaris][indexKolom]).strip()) > 1:
                                isiKolom = ''.join(map(str, [word for word in list(str(IT1[indexIsi + indexTabel * jBaris][indexKolom])) if word.isdigit()]))
                            elif indexKolom == 0 and str(IT1[indexIsi + indexTabel * jBaris][indexKolom]).count(".") != 1:
                                isiKolom = ''.join(map(str, [word for word in list(str(IT1[indexIsi + indexTabel * jBaris][indexKolom])) if word.isdigit()])) + "."
                            else:
                                isiKolom = IT1[indexIsi + indexTabel * jBaris][indexKolom]

                            if indexKolom == 8 and len(str(IT1[indexIsi + indexTabel * jBaris][indexKolom]).strip()) > 1:
                                addSimbolS(it1X[indexKolom], tCHeader + indexIsi * tCIsi,
                                           it1lc[indexKolom], tCIsi, isiKolom, it1ts[indexKolom], it1ca[indexKolom], it1ta[indexKolom])
                            else:
                                tambahText(it1X[indexKolom], tCHeader + indexIsi * tCIsi,
                                            isiKolom,
                                            it1ts[indexKolom], it1lc[indexKolom], tCIsi, it1ca[indexKolom], it1ta[indexKolom])
                startX += it1X[26] + 150

            for indexTabel in range(totalTabelIT2):
                self.change_value.emit([(bobotSetting + totalTabelIT1 + indexTabel) * pengaliProsess, "Drafting Interlocking Tabel (%s) ..." % (totalTabelIT1 + indexTabel + 1)])
                if headerNotes:
                    tambahText(it2X[15] * 0.5 - 50, -15, "INTERLOCKING TABLE (%s)" % (totalTabelIT1 + indexTabel + 1), 3, 100, 2)
                    t1 = "{\\fArial|b1|i0|c0|p34;\LNOTES}\n\n(T) = TRAIN ROUTE\n(E) = EMERGENCY ROUTE\n(S) = SHUNT ROUTE\n(CF) = CONTRA FLOW ROUTE"
                    t2 = "\n\nHOME SIGNAL IS CLEARED TO\nGREEN WHEN THE STARTER\nSIGNAL IS GREEN"
                    t3 = "\n\nEMERGENCY SIGNAL ASPECT IS\nCANCELLED AUTOMATICALLY AFTER\n90 SECOND"
                    t4 = "\n\n\nSPEED INDICATOR TO BE LAMP PROVED WITH YELLOW\nAND GREEN SIGNAL"
                    t4x = "\n\n\n\n\n\n\n\n\n3  =  VARIABLE SPEED INDICATOR\n3  =  FIX SPEED INDICATOR"
                    t5 = "\n\nSIGNAL NUMBER MARKED WITH 'X',\nSHOW OPPOSING SIGNAL WHERE NO\nDESTINATION SIGNAL IS AVAILABLE"
                    t6 = "\n\n\nFIX MARKER"
                    t7 = "\n\nRX-N = \"KEY LOCK\" AT UP POSITION AND\nLOCKED\nDX-N = \"DERAILER\" AT UP POSITION AND\nLOCKED"
                    t8 = "\n\n{\LUNDERLINE} = TRACK CIRCUIT WITH\nUNDERLINE IS OPPOSITE SIGNAL TRACK"

                    tambahTextNotes(0, tCHeader + jBaris * tCIsi + 5, "\n\n*1\n\n\n\n\n*2", 1, 25)
                    tambahTextNotes(4, tCHeader + jBaris * tCIsi + 5, t1 + t2, 1, 25)

                    tambahTextNotes(30, tCHeader + jBaris * tCIsi + 5, "\n\n*3\n\n\n\n\n*4", 1, 50)
                    tambahTextNotes(34, tCHeader + jBaris * tCIsi + 5, t3 + t4, 1, 40)
                    tambahTextNotes(39, tCHeader + jBaris * tCIsi + 5, t4x, 1, 40)
                    addSimbolSNotes(39.35, tCHeader + jBaris * tCIsi + 5 + 17.25, 1)

                    tambahTextNotes(80, tCHeader + jBaris * tCIsi + 5, "\n\n*5\n\n\n\n\n*6", 1, 25)
                    tambahTextNotes(84, tCHeader + jBaris * tCIsi + 5, t5 + t6, 1, 40)

                    tambahTextNotes(120, tCHeader + jBaris * tCIsi + 5, "\n\n*7\n\n\n\n\n*8", 1, 50)
                    tambahTextNotes(124, tCHeader + jBaris * tCIsi + 5, t7 + t8, 1, 40)

                #membuat tabel
                tambahBaris(0, 0, it2X[15])
                tambahBaris(it2X[3], tCHeader / 2, sum(it2lc[3:14]))
                tambahBaris(0, tCHeader, it2X[15])
                for index in range(jBaris + 1):
                    tambahBaris(0, tCHeader + index * tCIsi, it2X[15])
                for start in [it2X[0], it2X[1], it2X[2], it2X[3], it2X[6], it2X[7], it2X[11], it2X[14], it2X[15]]:
                    tambahKolom(start, 0, tCHeader + jBaris * tCIsi)
                for start in [it2X[4], it2X[5], it2X[8], it2X[9], it2X[10], it2X[12], it2X[13]]:
                    tambahKolom(start, tCHeader / 2, tCHeader / 2 + jBaris * tCIsi)

                tambahText(0, 0, "ROUTE NO.", uTHeader, it2lc[0], tCHeader)
                tambahText(it2X[1], 0, "ROUTE NAME", uTHeader, it2lc[1], tCHeader)
                tambahText(it2X[2], 0, "SIGNAL NUMBER", uTHeader, it2lc[2], tCHeader)
                tambahText(it2X[14], 0, "REMARK", uTHeader, it2lc[14], tCHeader)

                tambahText(it2X[3], 0, "ROUTE FLANK PROTECTION CONTROLS", uTHeader, sum(it2lc[3:6]), tCHeader / 2)
                tambahText(it2X[6], 0, "OVERLAP", uTHeader, it2lc[6], tCHeader / 2)
                tambahText(it2X[7], 0, "OVERLAP CONTROLS", uTHeader, sum(it2lc[7:11]), tCHeader / 2)
                tambahText(it2X[11], 0, "OVERLAP PROTECTION CONTROLS", uTHeader, sum(it2lc[11:14]), tCHeader / 2)

                tambahText(it2X[3], tCHeader * 0.5, "POINTS LOCKED", uTHeader, it2lc[3], tCHeader * 0.5)
                tambahText(it2X[4], tCHeader * 0.5, "SIGNAL LOCKED & PROVED AT DANGER", uTHeader, it2lc[4], tCHeader * 0.5)
                tambahText(it2X[5], tCHeader * 0.5, "TRACK CLEAR", uTHeader, it2lc[5], tCHeader * 0.5)
                tambahText(it2X[6], tCHeader * 0.5, "START SIGNAL", uTHeader, it2lc[6], tCHeader * 0.5)
                tambahText(it2X[7], tCHeader * 0.5, "POINTS LOCKED", uTHeader, it2lc[7], tCHeader * 0.5)
                tambahText(it2X[8], tCHeader * 0.5, "KEY DETECT", uTHeader, it2lc[8], tCHeader * 0.5)
                tambahText(it2X[9], tCHeader * 0.5, "TRACK CLEAR", uTHeader, it2lc[9], tCHeader * 0.5)
                tambahText(it2X[10], tCHeader * 0.5, "OPPOSING SIGNAL LOCKED", uTHeader, it2lc[10], tCHeader * 0.5)
                tambahText(it2X[11], tCHeader * 0.5, "POINTS LOCKED", uTHeader, it2lc[11], tCHeader * 0.5)
                tambahText(it2X[12], tCHeader * 0.5, "SIGNAL LOCKED & PROVED AT DANGER", uTHeader, it2lc[12], tCHeader * 0.5)
                tambahText(it2X[13], tCHeader * 0.5, "TRACK CLEAR", uTHeader, it2lc[13], tCHeader * 0.5)

                #membuat isi
                for indexIsi in range(jBaris):
                    #if ini memastikan drafting maksimal nomornya agar tidak error
                    if indexIsi + indexTabel * jBaris < len(IT2):
                        for indexKolom in range(15):
                            if indexKolom == 0 and str(IT2[indexIsi + indexTabel * jBaris][indexKolom]).count(".") != 1:
                                isiKolom = ''.join(map(str, [word for word in list(str(IT2[indexIsi + indexTabel * jBaris][indexKolom])) if word.isdigit()])) + "."
                            else:
                                isiKolom = IT2[indexIsi + indexTabel * jBaris][indexKolom]

                            tambahText(it2X[indexKolom], tCHeader + indexIsi * tCIsi,
                                       isiKolom,
                                       it2ts[indexKolom], it2lc[indexKolom], tCIsi, it2ca[indexKolom],
                                       it2ta[indexKolom])

                startX += it2X[15] + 150

            self.change_value.emit([100, "Drafting Selesai..."])

        # except Exception as e:
        #     self.messageBox(str(e), "Proses Terhenti, Autocad Terganggu")
        #     self.change_value.emit([0, "Stopped..."])

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    progresWIndow = QtWidgets.QDialog()
    ui = Ui_progresWIndow()
    ui.setupUi(progresWIndow)
    progresWIndow.show()
    sys.exit(app.exec_())
